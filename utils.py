import difflib
import numpy as np

donuttin = lambda x,roundto:x

def compareAndDiff(param,output=True):
    testname,inp,out,errdesc,mark = param
    printout("_"*30 + "\n",output)
    printout(f"Test: {testname}",output)
    printout("_"*30,output)
    if inp != out:
        # printout(f"Error: {errdesc}. Here's the differences:",output)
        printout(f"Error: {errdesc}.", output)
        # printout("\n".join([line for line in difflib.unified_diff(inp.splitlines(), out.splitlines())]),output)
        printout(f"Result: Failed! Mark: 0",output)
        printout("_"*30,output)
        printout("",output)
        return False
    printout(f"Result: Passed! Mark: {mark}",output)
    printout("_"*30,output)
    printout("",output)
    return True

def printout(s,output=True):
    if not output:
        return
    print(s)

def testCell(params,output=True):
    if not params:
        printout("Error: Something went wrong when executing the tests... Re-visit your code", output)
        printout("Errors were encountered! Current Marks: 0", output)
        return 0.0

    try:
        results = []
        for param in params:
            results.append(compareAndDiff(param,output))

        marks = sum([int(result)*param[4] for param,result in zip(params,results)])

        if False in results:
            printout(f"Errors were encountered! Current Marks: {marks}",output)
        else:
            printout(f"Looks good from the few tests done! Marks: {marks}",output)
        return marks

    except Exception as e:
        printout("Error: Something went wrong when executing the tests... Re-visit your code",output)
        printout("Errors were encountered! Current Marks: 0", output)
        printout("Here's the error:",output)
        printout(e,output)
        return 0.0

def printablearr(arr):
    return str(roundd(arr).tolist())

def params16(func):
    try:
        return [
            ("Check obtainScaledXTest",printablearr(func(
        np.array([[37.08, 15.06, 43.8, 18.95, 42.82], [3.74, 18.45, 16.0, 46.1, 23.67], [27.22, 16.4, 13.88, 25.04, 27.41], [31.65, 23.56, 30.23, 21.97, 19.77], [48.9, 47.02, 31.28, 1.49, 24.76], [47.16, 28.02, 24.2, 34.01, 1.56], [31.78, 34.94, 30.04, 47.44, 41.33], [21.56, 21.96, 36.47, 25.46, 12.74], [36.07, 24.11, 21.99, 10.36, 48.51], [6.54, 8.48, 39.56, 37.69, 15.59], [22.95, 24.19, 20.34, 6.15, 14.3], [42.39, 32.1, 21.99, 12.2, 28.94], [48.7, 37.38, 33.82, 34.15, 23.99], [5.93, 42.04, 30.37, 29.37, 40.41], [11.42, 13.23, 39.62, 27.44, 14.34], [14.22, 45.05, 18.51, 5.63, 39.4], [34.87, 2.71, 43.7, 5.79, 5.13], [31.41, 47.71, 12.83, 28.68, 26.53], [40.06, 14.88, 41.81, 47.75, 5.54], [14.02, 10.98, 21.67, 13.97, 36.66], [12.08, 6.39, 18.93, 42.31, 9.87], [19.72, 27.85, 13.64, 31.03, 48.01], [27.16, 46.74, 22.76, 11.75, 7.75], [47.26, 39.76, 28.97, 22.69, 10.27], [5.02, 40.44, 45.63, 21.51, 2.66], [31.07, 34.16, 42.69, 29.25, 38.45]]),
        5,
        26,
        np.array([[0],[-0.1], [-0.07], [-0.1], [-0.11], [0.18]]),
        np.array([[7.4, 6.95, 5.17, 6.88, 7.37]]),
        np.array([[13.65, 13.66, 14.33, 12.43, 11.67]]))),
             "[[-0.24], [-0.19], [-0.02], [-0.61], [-0.65], [-1.38], [-0.6], [-0.8], [0.38], [-0.65], [-0.18], [-0.3], [-1.14], [-0.06], [-0.63], [0.38], [-0.8], [-0.45], [-1.62], [0.47], [-0.52], [0.38], [-0.76], [-1.2], [-1.12], [-0.61]]","Your obtainScaledXTest function seems incorrect",1.5)
        ]
    except:
        return []

def params15(func):
    try:
        return [
            ("Check obtainScaledXTest",printablearr(func(
        np.array([[37.08, 15.06, 43.8, 18.95, 42.82], [3.74, 18.45, 16.0, 46.1, 23.67], [27.22, 16.4, 13.88, 25.04, 27.41], [31.65, 23.56, 30.23, 21.97, 19.77], [48.9, 47.02, 31.28, 1.49, 24.76], [47.16, 28.02, 24.2, 34.01, 1.56], [31.78, 34.94, 30.04, 47.44, 41.33], [21.56, 21.96, 36.47, 25.46, 12.74], [36.07, 24.11, 21.99, 10.36, 48.51], [6.54, 8.48, 39.56, 37.69, 15.59], [22.95, 24.19, 20.34, 6.15, 14.3], [42.39, 32.1, 21.99, 12.2, 28.94], [48.7, 37.38, 33.82, 34.15, 23.99], [5.93, 42.04, 30.37, 29.37, 40.41], [11.42, 13.23, 39.62, 27.44, 14.34], [14.22, 45.05, 18.51, 5.63, 39.4], [34.87, 2.71, 43.7, 5.79, 5.13], [31.41, 47.71, 12.83, 28.68, 26.53], [40.06, 14.88, 41.81, 47.75, 5.54], [14.02, 10.98, 21.67, 13.97, 36.66], [12.08, 6.39, 18.93, 42.31, 9.87], [19.72, 27.85, 13.64, 31.03, 48.01], [27.16, 46.74, 22.76, 11.75, 7.75], [47.26, 39.76, 28.97, 22.69, 10.27], [5.02, 40.44, 45.63, 21.51, 2.66], [31.07, 34.16, 42.69, 29.25, 38.45]]),
        5,
        np.array([[7.4, 6.95, 5.17, 6.88, 7.37]]),
        np.array([[13.65, 13.66, 14.33, 12.43, 11.67]]))),
             "[[3.17, 0.2, 5.7, 0.95, 4.23], [-1.34, 0.69, 0.32, 4.89, 1.63], [1.83, 0.39, -0.09, 1.83, 2.14], [2.43, 1.42, 3.08, 1.39, 1.1], [4.76, 4.8, 3.28, -1.59, 1.78], [4.53, 2.07, 1.91, 3.14, -1.37], [2.45, 3.06, 3.04, 5.09, 4.02], [1.07, 1.19, 4.28, 1.89, 0.15], [3.03, 1.5, 1.48, -0.3, 5.0], [-0.96, -0.75, 4.88, 3.67, 0.53], [1.26, 1.52, 1.16, -0.91, 0.36], [3.88, 2.65, 1.48, -0.03, 2.34], [4.74, 3.41, 3.77, 3.16, 1.67], [-1.04, 4.08, 3.1, 2.46, 3.9], [-0.3, -0.06, 4.89, 2.18, 0.36], [0.08, 4.52, 0.81, -0.99, 3.76], [2.87, -1.58, 5.68, -0.97, -0.89], [2.4, 4.9, -0.29, 2.36, 2.02], [3.57, 0.18, 5.32, 5.13, -0.83], [0.05, -0.39, 1.42, 0.22, 3.39], [-0.21, -1.05, 0.89, 4.34, -0.24], [0.82, 2.04, -0.13, 2.7, 4.93], [1.83, 4.76, 1.63, -0.1, -0.53], [4.54, 3.76, 2.83, 1.49, -0.19], [-1.17, 3.85, 6.05, 1.32, -1.22], [2.35, 2.95, 5.49, 2.44, 3.63]]","Your obtainScaledXTest function seems incorrect",1)
        ]
    except:
        return []

def params14(func):
    ll = func(np.array([.0,.0,.0,.0,.0,.0]).reshape(6,1), np.array([[1.0, 0.71, -0.86, 1.55, -0.4, 1.38], [1.0, -1.59, -0.61, -1.19, 1.61, 0.06], [1.0, 0.03, -0.76, -1.4, 0.05, 0.31], [1.0, 0.34, -0.24, 0.21, -0.18, -0.21], [1.0, 1.53, 1.49, 0.32, -1.7, 0.13], [1.0, 1.41, 0.09, -0.38, 0.72, -1.47], [1.0, 0.35, 0.6, 0.19, 1.71, 1.28], [1.0, -0.36, -0.35, 0.83, 0.08, -0.7], [1.0, 0.64, -0.2, -0.6, -1.04, 1.77], [1.0, -1.39, -1.34, 1.13, 0.99, -0.51], [1.0, -0.26, -0.19, -0.76, -1.35, -0.59], [1.0, 1.08, 0.39, -0.6, -0.9, 0.42], [1.0, 1.51, 0.78, 0.57, 0.73, 0.08], [1.0, -1.44, 1.12, 0.23, 0.37, 1.21], [1.0, -1.06, -0.99, 1.14, 0.23, -0.59], [1.0, -0.86, 1.34, -0.95, -1.39, 1.14], [1.0, 0.56, -1.77, 1.54, -1.38, -1.23], [1.0, 0.32, 1.54, -1.51, 0.32, 0.25], [1.0, 0.92, -0.87, 1.36, 1.73, -1.2], [1.0, -0.88, -1.16, -0.63, -0.77, 0.95], [1.0, -1.01, -1.5, -0.9, 1.33, -0.9], [1.0, -0.49, 0.08, -1.43, 0.49, 1.74], [1.0, 0.03, 1.46, -0.53, -0.93, -1.05], [1.0, 1.41, 0.95, 0.09, -0.12, -0.87], [1.0, -1.5, 1.0, 1.73, -0.21, -1.4]]), np.array([[2.27], [0.92], [2.68], [1.16], [2.62], [0.23], [1.13], [0.98], [2.82], [1.45], [1.67], [1.0], [0.85], [1.53], [1.68], [1.94], [1.44], [1.85], [1.35], [1.21], [2.99], [2.88], [1.91], [0.09], [1.52]]), 25, 10, 0.1)
    return [
        ("Check vectorized gradient descent function costs (multi-features)",printablearr(np.array(ll[0])),"[1.58, 1.32, 1.11, 0.94, 0.8, 0.68, 0.59, 0.52, 0.46, 0.41, 0.37]","Your costs seem to be incorrect",0.5),
        ("Check vectorized gradient descent function thetas (multi-features)",printablearr(np.array(ll[1])),"[[1.05], [-0.1], [-0.07], [-0.1], [-0.12], [0.18]]","Your thetas seem to be incorrect",1.5)
    ]

def params13(func):
    try:
        return [
            ("Check addX0 function (no marks)",str(func(np.array([[18.92, 7.69, 22.35], [9.67, 21.85, 1.91], [9.41, 8.16, 23.52], [12.08, 13.89, 8.37], [7.08, 12.78, 13.99], [16.15, 12.02, 15.42], [11.21, 10.09, 24.95], [23.99, 15.96, 0.76], [12.63, 24.06, 14.3], [12.35, 17.35, 0.8], [16.21, 17.83, 15.33], [24.2, 21.09, 11.0], [11.2, 18.61, 12.99], [6.5, 18.4, 12.3], [11.22, 5.29, 24.75], [3.34, 4.33, 20.18], [19.23, 7.95, 11.71], [12.34, 10.38, 3.14], [7.3, 21.63, 16.38], [11.22, 6.22, 14.77], [24.85, 19.07, 17.25], [17.42, 12.24, 3.02], [21.45, 15.5, 14.98], [20.62, 5.83, 6.75], [20.21, 14.0, 7.32], [7.26, 22.99, 9.44], [2.87, 20.1, 17.79], [1.38, 22.29, 2.95], [2.62, 16.03, 24.34], [6.54, 14.63, 13.54], [20.44, 7.59, 21.33], [24.36, 2.82, 7.15], [5.6, 11.06, 7.13], [18.7, 6.17, 3.26], [9.66, 21.59, 5.03], [10.06, 14.21, 6.96], [15.83, 24.49, 13.86], [23.84, 11.61, 6.0], [3.96, 24.11, 20.28], [14.78, 11.58, 5.24], [2.56, 20.63, 23.28], [10.97, 1.36, 15.85], [17.43, 21.78, 14.92], [19.62, 4.04, 24.72], [22.97, 0.27, 20.2], [4.69, 6.56, 6.04], [18.89, 3.28, 18.03], [12.0, 8.28, 17.25], [23.79, 1.27, 19.41], [17.67, 22.88, 11.82], [1.87, 10.19, 8.06], [22.12, 23.09, 24.23], [0.59, 16.3, 17.47], [19.91, 23.86, 15.82], [5.34, 4.93, 8.47], [8.66, 16.86, 18.8], [21.63, 18.0, 3.51], [8.11, 21.43, 12.89], [11.6, 2.68, 21.34], [9.29, 10.92, 10.96], [23.73, 21.89, 15.55], [18.29, 15.7, 6.21], [11.02, 12.09, 0.54], [7.45, 6.61, 0.28], [2.02, 13.08, 16.43], [20.46, 12.67, 17.82], [17.16, 22.38, 14.78], [15.55, 15.91, 8.4], [20.22, 24.37, 11.71], [17.9, 21.29, 3.27], [11.33, 12.87, 12.13], [13.3, 6.2, 19.64], [1.19, 21.22, 3.43], [23.62, 6.48, 16.43], [0.74, 20.18, 9.02], [3.17, 15.29, 4.75], [10.79, 1.31, 11.9], [17.75, 18.8, 21.12], [12.63, 7.4, 13.86], [19.55, 11.93, 1.09], [3.65, 18.68, 12.25], [6.32, 18.73, 16.58], [11.83, 15.07, 18.94], [7.63, 16.11, 22.65], [7.63, 11.49, 23.19], [4.31, 22.37, 13.78], [24.9, 18.78, 24.01]]),87).tolist()),"[[1.0, 18.92, 7.69, 22.35], [1.0, 9.67, 21.85, 1.91], [1.0, 9.41, 8.16, 23.52], [1.0, 12.08, 13.89, 8.37], [1.0, 7.08, 12.78, 13.99], [1.0, 16.15, 12.02, 15.42], [1.0, 11.21, 10.09, 24.95], [1.0, 23.99, 15.96, 0.76], [1.0, 12.63, 24.06, 14.3], [1.0, 12.35, 17.35, 0.8], [1.0, 16.21, 17.83, 15.33], [1.0, 24.2, 21.09, 11.0], [1.0, 11.2, 18.61, 12.99], [1.0, 6.5, 18.4, 12.3], [1.0, 11.22, 5.29, 24.75], [1.0, 3.34, 4.33, 20.18], [1.0, 19.23, 7.95, 11.71], [1.0, 12.34, 10.38, 3.14], [1.0, 7.3, 21.63, 16.38], [1.0, 11.22, 6.22, 14.77], [1.0, 24.85, 19.07, 17.25], [1.0, 17.42, 12.24, 3.02], [1.0, 21.45, 15.5, 14.98], [1.0, 20.62, 5.83, 6.75], [1.0, 20.21, 14.0, 7.32], [1.0, 7.26, 22.99, 9.44], [1.0, 2.87, 20.1, 17.79], [1.0, 1.38, 22.29, 2.95], [1.0, 2.62, 16.03, 24.34], [1.0, 6.54, 14.63, 13.54], [1.0, 20.44, 7.59, 21.33], [1.0, 24.36, 2.82, 7.15], [1.0, 5.6, 11.06, 7.13], [1.0, 18.7, 6.17, 3.26], [1.0, 9.66, 21.59, 5.03], [1.0, 10.06, 14.21, 6.96], [1.0, 15.83, 24.49, 13.86], [1.0, 23.84, 11.61, 6.0], [1.0, 3.96, 24.11, 20.28], [1.0, 14.78, 11.58, 5.24], [1.0, 2.56, 20.63, 23.28], [1.0, 10.97, 1.36, 15.85], [1.0, 17.43, 21.78, 14.92], [1.0, 19.62, 4.04, 24.72], [1.0, 22.97, 0.27, 20.2], [1.0, 4.69, 6.56, 6.04], [1.0, 18.89, 3.28, 18.03], [1.0, 12.0, 8.28, 17.25], [1.0, 23.79, 1.27, 19.41], [1.0, 17.67, 22.88, 11.82], [1.0, 1.87, 10.19, 8.06], [1.0, 22.12, 23.09, 24.23], [1.0, 0.59, 16.3, 17.47], [1.0, 19.91, 23.86, 15.82], [1.0, 5.34, 4.93, 8.47], [1.0, 8.66, 16.86, 18.8], [1.0, 21.63, 18.0, 3.51], [1.0, 8.11, 21.43, 12.89], [1.0, 11.6, 2.68, 21.34], [1.0, 9.29, 10.92, 10.96], [1.0, 23.73, 21.89, 15.55], [1.0, 18.29, 15.7, 6.21], [1.0, 11.02, 12.09, 0.54], [1.0, 7.45, 6.61, 0.28], [1.0, 2.02, 13.08, 16.43], [1.0, 20.46, 12.67, 17.82], [1.0, 17.16, 22.38, 14.78], [1.0, 15.55, 15.91, 8.4], [1.0, 20.22, 24.37, 11.71], [1.0, 17.9, 21.29, 3.27], [1.0, 11.33, 12.87, 12.13], [1.0, 13.3, 6.2, 19.64], [1.0, 1.19, 21.22, 3.43], [1.0, 23.62, 6.48, 16.43], [1.0, 0.74, 20.18, 9.02], [1.0, 3.17, 15.29, 4.75], [1.0, 10.79, 1.31, 11.9], [1.0, 17.75, 18.8, 21.12], [1.0, 12.63, 7.4, 13.86], [1.0, 19.55, 11.93, 1.09], [1.0, 3.65, 18.68, 12.25], [1.0, 6.32, 18.73, 16.58], [1.0, 11.83, 15.07, 18.94], [1.0, 7.63, 16.11, 22.65], [1.0, 7.63, 11.49, 23.19], [1.0, 4.31, 22.37, 13.78], [1.0, 24.9, 18.78, 24.01]]","Your addX0 function seems to be incorrect",0)
        ]
    except:
        return []

def params12(func):
    try:
        ll = [[18.92, 7.69, 22.35, 9.67, 21.85], [1.91, 9.41, 8.16, 23.52, 12.08], [13.89, 8.37, 7.08, 12.78, 13.99], [16.15, 12.02, 15.42, 11.21, 10.09], [24.95, 23.99, 15.96, 0.76, 12.63], [24.06, 14.3, 12.35, 17.35, 0.8], [16.21, 17.83, 15.33, 24.2, 21.09], [11.0, 11.2, 18.61, 12.99, 6.5], [18.4, 12.3, 11.22, 5.29, 24.75], [3.34, 4.33, 20.18, 19.23, 7.95], [11.71, 12.34, 10.38, 3.14, 7.3], [21.63, 16.38, 11.22, 6.22, 14.77], [24.85, 19.07, 17.25, 17.42, 12.24], [3.02, 21.45, 15.5, 14.98, 20.62], [5.83, 6.75, 20.21, 14.0, 7.32], [7.26, 22.99, 9.44, 2.87, 20.1], [17.79, 1.38, 22.29, 2.95, 2.62], [16.03, 24.34, 6.54, 14.63, 13.54], [20.44, 7.59, 21.33, 24.36, 2.82], [7.15, 5.6, 11.06, 7.13, 18.7], [6.17, 3.26, 9.66, 21.59, 5.03], [10.06, 14.21, 6.96, 15.83, 24.49], [13.86, 23.84, 11.61, 6.0, 3.96], [24.11, 20.28, 14.78, 11.58, 5.24], [2.56, 20.63, 23.28, 10.97, 1.36]]
        aa,bb,cc = func(np.array(ll),5)
        return [
            ("Check StdDevs",str(roundd(aa).tolist()),"[[7.4, 6.95, 5.17, 6.88, 7.37]]","StDevs seem to be incorrect",0.5),
            ("Check Means",str(roundd(bb).tolist()),"[[13.65, 13.66, 14.33, 12.43, 11.67]]","Means seem to be incorrect",0.5),
            ("Check X_scaled",str(roundd(cc).tolist()),"[[0.71, -0.86, 1.55, -0.4, 1.38], [-1.59, -0.61, -1.19, 1.61, 0.06], [0.03, -0.76, -1.4, 0.05, 0.31], [0.34, -0.24, 0.21, -0.18, -0.21], [1.53, 1.49, 0.32, -1.7, 0.13], [1.41, 0.09, -0.38, 0.72, -1.47], [0.35, 0.6, 0.19, 1.71, 1.28], [-0.36, -0.35, 0.83, 0.08, -0.7], [0.64, -0.2, -0.6, -1.04, 1.77], [-1.39, -1.34, 1.13, 0.99, -0.51], [-0.26, -0.19, -0.76, -1.35, -0.59], [1.08, 0.39, -0.6, -0.9, 0.42], [1.51, 0.78, 0.57, 0.73, 0.08], [-1.44, 1.12, 0.23, 0.37, 1.21], [-1.06, -0.99, 1.14, 0.23, -0.59], [-0.86, 1.34, -0.95, -1.39, 1.14], [0.56, -1.77, 1.54, -1.38, -1.23], [0.32, 1.54, -1.51, 0.32, 0.25], [0.92, -0.87, 1.36, 1.73, -1.2], [-0.88, -1.16, -0.63, -0.77, 0.95], [-1.01, -1.5, -0.9, 1.33, -0.9], [-0.49, 0.08, -1.43, 0.49, 1.74], [0.03, 1.46, -0.53, -0.93, -1.05], [1.41, 0.95, 0.09, -0.12, -0.87], [-1.5, 1.0, 1.73, -0.21, -1.4]]","X_scaled seems to be incorrect",1.5)
        ]
    except:
        return []

def params11(func,func2,dd):
    try:
        return [
            ("Check m (no marks)",str(func(dd)[1]),"43","Your n is incorrect",0),
            ("Check n (no marks)",str(func(dd)[0]),"3","Your m is incorrect",0),
            ("Check X (no marks)",str(roundd(func2(dd)[1]).tolist()),str(roundd(np.array([[20.0, 119631.0, 4.16], [1.0, 198544.0, 5.96], [25.0, 149698.0, 9.76], [20.0, 152918.0, 2.01], [19.0, 271818.0, 3.82], [15.0, 187508.0, 1.38], [9.0, 333814.0, 7.65], [28.0, 190518.0, 6.92], [13.0, 28825.0, 2.93], [12.0, 128283.0, 4.75], [28.0, 297813.0, 6.79], [24.0, 142256.0, 6.95], [6.0, 9618.0, 2.53], [23.0, 86587.0, 8.93], [8.0, 23594.0, 8.0], [35.0, 347849.0, 2.21], [38.0, 339706.0, 8.82], [22.0, 280110.0, 7.74], [38.0, 210676.0, 8.19], [4.0, 267759.0, 5.89], [23.0, 59312.0, 2.99], [3.0, 102629.0, 9.27], [19.0, 183471.0, 6.33], [4.0, 124883.0, 4.12], [6.0, 16083.0, 3.37], [27.0, 344105.0, 9.23], [10.0, 154530.0, 4.78], [5.0, 176450.0, 5.86], [10.0, 113307.0, 6.48], [16.0, 90985.0, 8.44], [21.0, 135473.0, 6.61], [9.0, 291223.0, 2.59], [29.0, 257888.0, 6.32], [22.0, 132786.0, 5.4], [23.0, 4655.0, 5.93], [17.0, 279112.0, 7.3], [36.0, 94359.0, 3.21], [26.0, 203981.0, 2.68], [7.0, 9040.0, 2.0], [32.0, 231804.0, 3.47], [43.0, 135694.0, 1.09], [23.0, 174026.0, 6.66], [40.0, 145276.0, 3.66]])).tolist()),"Your X is incorrect",0),
            ("Check y (no marks)",str(roundd(func2(dd)[0]).tolist()),str(roundd(np.array([[603513.0], [400034.0], [525979.0], [517675.0], [211072.0], [428482.0], [51211.0], [420714.0], [837679.0], [581208.0], [144034.0], [545170.0], [887211.0], [688724.0], [851172.0], [15000.0], [35999.0], [189688.0], [368728.0], [221548.0], [759056.0], [647369.0], [438893.0], [589980.0], [870541.0], [24662.0], [513527.0], [457006.0], [619828.0], [677386.0], [562663.0], [161036.0], [246987.0], [569590.0], [900000.0], [192264.0], [668673.0], [385997.0], [888701.0], [314247.0], [562077.0], [463245.0], [537372.0]])).tolist()),"Your y is incorrect",0),
        ]
    except:
        return []

def params10(func):
    try:
        return [
            ("Check makeAPredictionNoScaling",str(roundd(func(np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907], [7.296442731309094], [21.629032189810307], [16.380031568793115], [11.21980799856599], [6.224642903728206], [14.767546378250938], [24.84594652140192], [19.070471728658926], [17.254638963266654], [17.424879725007262], [12.237606858832647], [3.024794014215715], [21.447094660294034], [15.495183982682747]]),1,68,np.array([[0.5993659298139502], [0.8246331292854807]]))).tolist()),"[[16.2], [6.94], [19.03], [8.57], [18.61], [2.17], [8.36], [7.33], [20.0], [10.56], [12.05], [7.5], [6.44], [11.14], [12.13], [13.91], [10.51], [13.32], [9.84], [8.92], [21.17], [20.38], [13.76], [1.23], [11.02], [20.44], [12.39], [10.78], [14.91], [1.26], [13.97], [15.3], [13.24], [20.56], [17.99], [9.67], [9.84], [15.94], [11.31], [5.96], [15.77], [10.74], [9.85], [4.96], [21.01], [3.35], [4.17], [17.24], [16.46], [7.16], [10.26], [10.78], [9.16], [3.19], [6.62], [18.44], [14.11], [9.85], [5.73], [12.78], [21.09], [16.33], [14.83], [14.97], [10.69], [3.09], [18.29], [13.38]]","Your iterative hypothesis prediction(s) with one feature is/are incorrect",0.5)
        ]
    except:
        return []

def params9(func,func2):
    try:

        ll = func(np.array([[0.29185770925236376], [0.8651612875924123]]),func2(np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907]]),54),np.array([[0.6552012627517245], [0.4487923199426396], [0.24898571614912823], [0.5907018551300375], [0.9938378608560768], [0.7628188691463571], [0.6901855585306661], [0.6969951890002904], [0.4895042743533059], [0.12099176056862859], [0.8578837864117614], [0.6198073593073099], [0.5993659298139502], [0.8246331292854807], [0.23314047452951503], [0.2700355355945341], [0.8085200781604761], [0.5599090126178582], [0.2926039661527391], [0.29028263341864213], [0.9194522791957375], [0.37778176587241863], [0.11490019695515352], [0.8040993292571099], [0.7115485450045729], [0.05532565776428733], [0.8917779332583314], [0.11815518233988886], [0.10474690612019699], [0.6410869710421365], [0.9736303333639261], [0.26176436926054314], [0.5852834394054154], [0.5415146965761024], [0.8174886139006491], [0.3035836304546192], [0.8532604205314186], [0.9744710100343372], [0.1129970750830519], [0.2860582220937298], [0.22403731190119414], [0.44232877148886973], [0.28512517521861613], [0.7481617659348435], [0.24661841035096144], [0.1303771268333802], [0.38629688949357355], [0.8634551135853895], [0.20139845981195115], [0.40247329942228693], [0.568416446448524], [0.2783419120516688], [0.6333590913465329], [0.9797162440972601]]),54,100,0.0001)
        return [
            ("Check vectorized gradient descent function costs",str(roundd(np.array(ll[0])).tolist()),"[80.23, 76.72, 73.36, 70.15, 67.07, 64.14, 61.33, 58.64, 56.07, 53.62, 51.27, 49.03, 46.88, 44.83, 42.87, 40.99, 39.2, 37.48, 35.84, 34.27, 32.77, 31.34, 29.97, 28.66, 27.4, 26.2, 25.06, 23.96, 22.91, 21.91, 20.95, 20.04, 19.16, 18.32, 17.52, 16.76, 16.02, 15.32, 14.66, 14.02, 13.4, 12.82, 12.26, 11.72, 11.21, 10.72, 10.25, 9.81, 9.38, 8.97, 8.58, 8.21, 7.85, 7.51, 7.18, 6.87, 6.57, 6.28, 6.01, 5.75, 5.5, 5.26, 5.03, 4.81, 4.6, 4.4, 4.21, 4.03, 3.86, 3.69, 3.53, 3.38, 3.23, 3.09, 2.96, 2.83, 2.71, 2.59, 2.48, 2.38, 2.27, 2.18, 2.08, 1.99, 1.91, 1.83, 1.75, 1.67, 1.6, 1.54, 1.47, 1.41, 1.35, 1.29, 1.24, 1.18, 1.14, 1.09, 1.04, 1.0, 0.96]","Your iterative gradient descent function seems incorrect",0.5),
            ("Check vectorized gradient descent function thetas",str(roundd(np.array(ll[1])).tolist()),"[[0.25], [0.11]]","Your iterative gradient descent function seems incorrect",2)
        ]
    except:
        return []


def params8(func,func2):
    try:
        return [
            ("Check vectorized cost function",str(roundd(func(np.array([[0.29028263341864213], [0.9194522791957375]]),func2(np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907], [7.296442731309094], [21.629032189810307], [16.380031568793115], [11.21980799856599], [6.224642903728206], [14.767546378250938], [24.84594652140192], [19.070471728658926], [17.254638963266654], [17.424879725007262], [12.237606858832647], [3.024794014215715], [21.447094660294034], [15.495183982682747], [14.984148245348756], [20.61582823213702], [5.828511863237876], [6.750888389863352], [20.213001954011904], [13.997725315446456], [7.315099153818477]]),75),np.array([[0.37778176587241863], [0.11490019695515352], [0.8040993292571099], [0.7115485450045729], [0.05532565776428733], [0.8917779332583314], [0.11815518233988886], [0.10474690612019699], [0.6410869710421365], [0.9736303333639261], [0.26176436926054314], [0.5852834394054154], [0.5415146965761024], [0.8174886139006491], [0.3035836304546192], [0.8532604205314186], [0.9744710100343372], [0.1129970750830519], [0.2860582220937298], [0.22403731190119414], [0.44232877148886973], [0.28512517521861613], [0.7481617659348435], [0.24661841035096144], [0.1303771268333802], [0.38629688949357355], [0.8634551135853895], [0.20139845981195115], [0.40247329942228693], [0.568416446448524], [0.2783419120516688], [0.6333590913465329], [0.9797162440972601], [0.5543582123528759], [0.9537824864654021], [0.4645098189384349], [0.23983388977088838], [0.15820323835847871], [0.9645881719542223], [0.8113849771333171], [0.5911359757408543], [0.4630719003618692], [0.20966354253386943], [0.10248500315054421], [0.8253788772256517], [0.931178930727269], [0.4389006222898233], [0.054235045807472515], [0.6341256999438601], [0.6971912579929898], [0.8711546629286336], [0.5969527276330143], [0.784751562011265], [0.1617263240068897], [0.9888653615859585], [0.9188717583879238], [0.01099819055129203], [0.808196036357232], [0.18749865706461277], [0.2624297957256858], [0.24141097476242857], [0.7556961544096624], [0.13104557851727916], [0.7210074991953719], [0.4800710019025761], [0.3313933456763237], [0.6900727486733351], [0.9515129893247164], [0.05099550032796951], [0.7765607485408866], [0.7066164004493386], [0.9153443357304222], [0.47274495696001817], [0.0749283335488432], [0.40776818481624455]]),75))),"92.65","Your iterative cost function seems correct",2.5)
        ]
    except:
        return []

def params7(func,func2):
    try:
        return [
            ("Check vectorized predictions on X",
             str(roundd(func(np.array([[0.5993659298139502], [0.8246331292854807]]), func2(np.array(
                [[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827],
                 [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342],
                 [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376],
                 [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532],
                 [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533],
                 [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396],
                 [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699],
                 [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487],
                 [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952],
                 [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604],
                 [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966],
                 [10.377680455116781], [3.138789384246907], [7.296442731309094], [21.629032189810307], [16.380031568793115],
                 [11.21980799856599], [6.224642903728206], [14.767546378250938], [24.84594652140192], [19.070471728658926],
                 [17.254638963266654], [17.424879725007262], [12.237606858832647], [3.024794014215715],
                 [21.447094660294034], [15.495183982682747]]),68), 68)).tolist()),
             "[[16.2], [6.94], [19.03], [8.57], [18.61], [2.17], [8.36], [7.33], [20.0], [10.56], [12.05], [7.5], [6.44], [11.14], [12.13], [13.91], [10.51], [13.32], [9.84], [8.92], [21.17], [20.38], [13.76], [1.23], [11.02], [20.44], [12.39], [10.78], [14.91], [1.26], [13.97], [15.3], [13.24], [20.56], [17.99], [9.67], [9.84], [15.94], [11.31], [5.96], [15.77], [10.74], [9.85], [4.96], [21.01], [3.35], [4.17], [17.24], [16.46], [7.16], [10.26], [10.78], [9.16], [3.19], [6.62], [18.44], [14.11], [9.85], [5.73], [12.78], [21.09], [16.33], [14.83], [14.97], [10.69], [3.09], [18.29], [13.38]]",
             "Your iterative hypothesis prediction(s) with one feature is/are incorrect", 0.5)
        ]
    except:
        return []

def params6(func):

    try:
        return [
            ("Check addX0 function",str(func(np.array([[18.92, 7.69, 22.35], [9.67, 21.85, 1.91], [9.41, 8.16, 23.52], [12.08, 13.89, 8.37], [7.08, 12.78, 13.99], [16.15, 12.02, 15.42], [11.21, 10.09, 24.95], [23.99, 15.96, 0.76], [12.63, 24.06, 14.3], [12.35, 17.35, 0.8], [16.21, 17.83, 15.33], [24.2, 21.09, 11.0], [11.2, 18.61, 12.99], [6.5, 18.4, 12.3], [11.22, 5.29, 24.75], [3.34, 4.33, 20.18], [19.23, 7.95, 11.71], [12.34, 10.38, 3.14], [7.3, 21.63, 16.38], [11.22, 6.22, 14.77], [24.85, 19.07, 17.25], [17.42, 12.24, 3.02], [21.45, 15.5, 14.98], [20.62, 5.83, 6.75], [20.21, 14.0, 7.32], [7.26, 22.99, 9.44], [2.87, 20.1, 17.79], [1.38, 22.29, 2.95], [2.62, 16.03, 24.34], [6.54, 14.63, 13.54], [20.44, 7.59, 21.33], [24.36, 2.82, 7.15], [5.6, 11.06, 7.13], [18.7, 6.17, 3.26], [9.66, 21.59, 5.03], [10.06, 14.21, 6.96], [15.83, 24.49, 13.86], [23.84, 11.61, 6.0], [3.96, 24.11, 20.28], [14.78, 11.58, 5.24], [2.56, 20.63, 23.28], [10.97, 1.36, 15.85], [17.43, 21.78, 14.92], [19.62, 4.04, 24.72], [22.97, 0.27, 20.2], [4.69, 6.56, 6.04], [18.89, 3.28, 18.03], [12.0, 8.28, 17.25], [23.79, 1.27, 19.41], [17.67, 22.88, 11.82], [1.87, 10.19, 8.06], [22.12, 23.09, 24.23], [0.59, 16.3, 17.47], [19.91, 23.86, 15.82], [5.34, 4.93, 8.47], [8.66, 16.86, 18.8], [21.63, 18.0, 3.51], [8.11, 21.43, 12.89], [11.6, 2.68, 21.34], [9.29, 10.92, 10.96], [23.73, 21.89, 15.55], [18.29, 15.7, 6.21], [11.02, 12.09, 0.54], [7.45, 6.61, 0.28], [2.02, 13.08, 16.43], [20.46, 12.67, 17.82], [17.16, 22.38, 14.78], [15.55, 15.91, 8.4], [20.22, 24.37, 11.71], [17.9, 21.29, 3.27], [11.33, 12.87, 12.13], [13.3, 6.2, 19.64], [1.19, 21.22, 3.43], [23.62, 6.48, 16.43], [0.74, 20.18, 9.02], [3.17, 15.29, 4.75], [10.79, 1.31, 11.9], [17.75, 18.8, 21.12], [12.63, 7.4, 13.86], [19.55, 11.93, 1.09], [3.65, 18.68, 12.25], [6.32, 18.73, 16.58], [11.83, 15.07, 18.94], [7.63, 16.11, 22.65], [7.63, 11.49, 23.19], [4.31, 22.37, 13.78], [24.9, 18.78, 24.01]]),87).tolist()),"[[1.0, 18.92, 7.69, 22.35], [1.0, 9.67, 21.85, 1.91], [1.0, 9.41, 8.16, 23.52], [1.0, 12.08, 13.89, 8.37], [1.0, 7.08, 12.78, 13.99], [1.0, 16.15, 12.02, 15.42], [1.0, 11.21, 10.09, 24.95], [1.0, 23.99, 15.96, 0.76], [1.0, 12.63, 24.06, 14.3], [1.0, 12.35, 17.35, 0.8], [1.0, 16.21, 17.83, 15.33], [1.0, 24.2, 21.09, 11.0], [1.0, 11.2, 18.61, 12.99], [1.0, 6.5, 18.4, 12.3], [1.0, 11.22, 5.29, 24.75], [1.0, 3.34, 4.33, 20.18], [1.0, 19.23, 7.95, 11.71], [1.0, 12.34, 10.38, 3.14], [1.0, 7.3, 21.63, 16.38], [1.0, 11.22, 6.22, 14.77], [1.0, 24.85, 19.07, 17.25], [1.0, 17.42, 12.24, 3.02], [1.0, 21.45, 15.5, 14.98], [1.0, 20.62, 5.83, 6.75], [1.0, 20.21, 14.0, 7.32], [1.0, 7.26, 22.99, 9.44], [1.0, 2.87, 20.1, 17.79], [1.0, 1.38, 22.29, 2.95], [1.0, 2.62, 16.03, 24.34], [1.0, 6.54, 14.63, 13.54], [1.0, 20.44, 7.59, 21.33], [1.0, 24.36, 2.82, 7.15], [1.0, 5.6, 11.06, 7.13], [1.0, 18.7, 6.17, 3.26], [1.0, 9.66, 21.59, 5.03], [1.0, 10.06, 14.21, 6.96], [1.0, 15.83, 24.49, 13.86], [1.0, 23.84, 11.61, 6.0], [1.0, 3.96, 24.11, 20.28], [1.0, 14.78, 11.58, 5.24], [1.0, 2.56, 20.63, 23.28], [1.0, 10.97, 1.36, 15.85], [1.0, 17.43, 21.78, 14.92], [1.0, 19.62, 4.04, 24.72], [1.0, 22.97, 0.27, 20.2], [1.0, 4.69, 6.56, 6.04], [1.0, 18.89, 3.28, 18.03], [1.0, 12.0, 8.28, 17.25], [1.0, 23.79, 1.27, 19.41], [1.0, 17.67, 22.88, 11.82], [1.0, 1.87, 10.19, 8.06], [1.0, 22.12, 23.09, 24.23], [1.0, 0.59, 16.3, 17.47], [1.0, 19.91, 23.86, 15.82], [1.0, 5.34, 4.93, 8.47], [1.0, 8.66, 16.86, 18.8], [1.0, 21.63, 18.0, 3.51], [1.0, 8.11, 21.43, 12.89], [1.0, 11.6, 2.68, 21.34], [1.0, 9.29, 10.92, 10.96], [1.0, 23.73, 21.89, 15.55], [1.0, 18.29, 15.7, 6.21], [1.0, 11.02, 12.09, 0.54], [1.0, 7.45, 6.61, 0.28], [1.0, 2.02, 13.08, 16.43], [1.0, 20.46, 12.67, 17.82], [1.0, 17.16, 22.38, 14.78], [1.0, 15.55, 15.91, 8.4], [1.0, 20.22, 24.37, 11.71], [1.0, 17.9, 21.29, 3.27], [1.0, 11.33, 12.87, 12.13], [1.0, 13.3, 6.2, 19.64], [1.0, 1.19, 21.22, 3.43], [1.0, 23.62, 6.48, 16.43], [1.0, 0.74, 20.18, 9.02], [1.0, 3.17, 15.29, 4.75], [1.0, 10.79, 1.31, 11.9], [1.0, 17.75, 18.8, 21.12], [1.0, 12.63, 7.4, 13.86], [1.0, 19.55, 11.93, 1.09], [1.0, 3.65, 18.68, 12.25], [1.0, 6.32, 18.73, 16.58], [1.0, 11.83, 15.07, 18.94], [1.0, 7.63, 16.11, 22.65], [1.0, 7.63, 11.49, 23.19], [1.0, 4.31, 22.37, 13.78], [1.0, 24.9, 18.78, 24.01]]","Your addX0 function seems to be incorrect",1)
        ]
    except:
        return []


def params5(func):
    try:
        ll = func(np.array([[0.29185770925236376], [0.8651612875924123]]),np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907]]),np.array([[0.6552012627517245], [0.4487923199426396], [0.24898571614912823], [0.5907018551300375], [0.9938378608560768], [0.7628188691463571], [0.6901855585306661], [0.6969951890002904], [0.4895042743533059], [0.12099176056862859], [0.8578837864117614], [0.6198073593073099], [0.5993659298139502], [0.8246331292854807], [0.23314047452951503], [0.2700355355945341], [0.8085200781604761], [0.5599090126178582], [0.2926039661527391], [0.29028263341864213], [0.9194522791957375], [0.37778176587241863], [0.11490019695515352], [0.8040993292571099], [0.7115485450045729], [0.05532565776428733], [0.8917779332583314], [0.11815518233988886], [0.10474690612019699], [0.6410869710421365], [0.9736303333639261], [0.26176436926054314], [0.5852834394054154], [0.5415146965761024], [0.8174886139006491], [0.3035836304546192], [0.8532604205314186], [0.9744710100343372], [0.1129970750830519], [0.2860582220937298], [0.22403731190119414], [0.44232877148886973], [0.28512517521861613], [0.7481617659348435], [0.24661841035096144], [0.1303771268333802], [0.38629688949357355], [0.8634551135853895], [0.20139845981195115], [0.40247329942228693], [0.568416446448524], [0.2783419120516688], [0.6333590913465329], [0.9797162440972601]]),54,100,0.0001)
        return [
            ("Check iterative gradient descent function costs",str(roundd(np.array(ll[0])).tolist()),"[80.23, 76.72, 73.36, 70.15, 67.07, 64.14, 61.33, 58.64, 56.07, 53.62, 51.27, 49.03, 46.88, 44.83, 42.87, 40.99, 39.2, 37.48, 35.84, 34.27, 32.77, 31.34, 29.97, 28.66, 27.4, 26.2, 25.06, 23.96, 22.91, 21.91, 20.95, 20.04, 19.16, 18.32, 17.52, 16.76, 16.02, 15.32, 14.66, 14.02, 13.4, 12.82, 12.26, 11.72, 11.21, 10.72, 10.25, 9.81, 9.38, 8.97, 8.58, 8.21, 7.85, 7.51, 7.18, 6.87, 6.57, 6.28, 6.01, 5.75, 5.5, 5.26, 5.03, 4.81, 4.6, 4.4, 4.21, 4.03, 3.86, 3.69, 3.53, 3.38, 3.23, 3.09, 2.96, 2.83, 2.71, 2.59, 2.48, 2.38, 2.27, 2.18, 2.08, 1.99, 1.91, 1.83, 1.75, 1.67, 1.6, 1.54, 1.47, 1.41, 1.35, 1.29, 1.24, 1.18, 1.14, 1.09, 1.04, 1.0, 0.96]","Your iterative gradient descent function seems incorrect",1.5),
            ("Check iterative gradient descent function thetas",str(roundd(np.array(ll[1])).tolist()),"[[0.25], [0.11]]","Your iterative gradient descent function seems incorrect",4)
        ]
    except:
        return []

def params4(func):
    try:
        return [
            ("Check iterative cost function",str(roundd(func(np.array([[0.29028263341864213], [0.9194522791957375]]),np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907], [7.296442731309094], [21.629032189810307], [16.380031568793115], [11.21980799856599], [6.224642903728206], [14.767546378250938], [24.84594652140192], [19.070471728658926], [17.254638963266654], [17.424879725007262], [12.237606858832647], [3.024794014215715], [21.447094660294034], [15.495183982682747], [14.984148245348756], [20.61582823213702], [5.828511863237876], [6.750888389863352], [20.213001954011904], [13.997725315446456], [7.315099153818477]]),np.array([[0.37778176587241863], [0.11490019695515352], [0.8040993292571099], [0.7115485450045729], [0.05532565776428733], [0.8917779332583314], [0.11815518233988886], [0.10474690612019699], [0.6410869710421365], [0.9736303333639261], [0.26176436926054314], [0.5852834394054154], [0.5415146965761024], [0.8174886139006491], [0.3035836304546192], [0.8532604205314186], [0.9744710100343372], [0.1129970750830519], [0.2860582220937298], [0.22403731190119414], [0.44232877148886973], [0.28512517521861613], [0.7481617659348435], [0.24661841035096144], [0.1303771268333802], [0.38629688949357355], [0.8634551135853895], [0.20139845981195115], [0.40247329942228693], [0.568416446448524], [0.2783419120516688], [0.6333590913465329], [0.9797162440972601], [0.5543582123528759], [0.9537824864654021], [0.4645098189384349], [0.23983388977088838], [0.15820323835847871], [0.9645881719542223], [0.8113849771333171], [0.5911359757408543], [0.4630719003618692], [0.20966354253386943], [0.10248500315054421], [0.8253788772256517], [0.931178930727269], [0.4389006222898233], [0.054235045807472515], [0.6341256999438601], [0.6971912579929898], [0.8711546629286336], [0.5969527276330143], [0.784751562011265], [0.1617263240068897], [0.9888653615859585], [0.9188717583879238], [0.01099819055129203], [0.808196036357232], [0.18749865706461277], [0.2624297957256858], [0.24141097476242857], [0.7556961544096624], [0.13104557851727916], [0.7210074991953719], [0.4800710019025761], [0.3313933456763237], [0.6900727486733351], [0.9515129893247164], [0.05099550032796951], [0.7765607485408866], [0.7066164004493386], [0.9153443357304222], [0.47274495696001817], [0.0749283335488432], [0.40776818481624455]]),75))),"92.65","Your iterative cost function seems correct",4)
        ]
    except:
        return []

def params3(func):
    try:
        return [
            ("Check predictions on X",str(roundd(func(np.array([[0.5993659298139502], [0.8246331292854807]]),np.array([[18.91704054710218], [7.6861273931611604], [22.347972378103155], [9.667245091272935], [21.846365238687827], [1.905896598115811], [9.41430484336396], [8.163850952425527], [23.52044672044755], [12.078048424422342], [13.886681504669696], [8.367649975157363], [7.082908296684737], [12.777472565902109], [13.985636705702376], [16.146635070597405], [12.020735310300537], [15.424602036300556], [11.210418875776268], [10.086834682532], [24.94674912821383], [23.987961503077084], [15.958313473160809], [0.7612571814989227], [12.6323861804533], [24.058773498750437], [14.297262052236166], [12.346029977380768], [17.352824097333396], [0.7974311960437797], [16.212038579332336], [17.825555144480834], [15.32685236291699], [24.201919840258054], [21.087127535477045], [10.998919302998978], [11.201892919201487], [18.608745480852498], [12.98762276857305], [6.499260155253397], [18.402006747114143], [12.30223179783952], [11.219962235321299], [5.288171159859159], [24.75047582634209], [3.3350961587570866], [4.328838695218604], [20.184173773577754], [19.230368716665], [7.954891940309134], [11.711592355453778], [12.344227561894966], [10.377680455116781], [3.138789384246907], [7.296442731309094], [21.629032189810307], [16.380031568793115], [11.21980799856599], [6.224642903728206], [14.767546378250938], [24.84594652140192], [19.070471728658926], [17.254638963266654], [17.424879725007262], [12.237606858832647], [3.024794014215715], [21.447094660294034], [15.495183982682747]]),68)).tolist()),"[[16.2], [6.94], [19.03], [8.57], [18.61], [2.17], [8.36], [7.33], [20.0], [10.56], [12.05], [7.5], [6.44], [11.14], [12.13], [13.91], [10.51], [13.32], [9.84], [8.92], [21.17], [20.38], [13.76], [1.23], [11.02], [20.44], [12.39], [10.78], [14.91], [1.26], [13.97], [15.3], [13.24], [20.56], [17.99], [9.67], [9.84], [15.94], [11.31], [5.96], [15.77], [10.74], [9.85], [4.96], [21.01], [3.35], [4.17], [17.24], [16.46], [7.16], [10.26], [10.78], [9.16], [3.19], [6.62], [18.44], [14.11], [9.85], [5.73], [12.78], [21.09], [16.33], [14.83], [14.97], [10.69], [3.09], [18.29], [13.38]]","Your iterative hypothesis prediction(s) with one feature is/are incorrect",0.5)
        ]
    except:
        return []

def roundd(arr: np.ndarray, decimals: int = 2) -> np.ndarray:
    return np.round(arr.astype(float), decimals=decimals)
    
        
def params2(func):
    try:
        aa = np.random.randint(1,15)
        bb = np.random.randint(55,255)
        cc = np.random.random((bb,aa))
        dd = np.random.random((bb,1))
        return [
            ("Check X",str(roundd(func(np.hstack((dd,cc)))[1],4)),str(roundd(cc,4)),"Your X is incorrect",0.25),
            ("Check y",str(roundd(func(np.hstack((dd,cc)))[0],4)),str(roundd(dd,4)),"Your y is incorrect",0.25),
        ]
    except:
        return []

def params1(func):
    try:
        aa = np.random.randint(1,15)
        bb = np.random.randint(55,255)
        return [
            ("Check m", func(np.random.random((bb,aa+1)))[0],aa,"Your n is incorrect",0.25),
            ("Check n", func(np.random.random((bb,aa+1)))[1],bb,"Your m is incorrect",0.25)
        ]
    except:
        return []